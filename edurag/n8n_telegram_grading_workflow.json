{
  "name": "EduRAG - Telegram PDF Grading Bot",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ]
      },
      "id": "telegram_trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ],
      "webhookId": "telegram-edurag-bot",
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "rules": [
            {
              "operation": "equals",
              "value1": "={{ $json.message.text }}",
              "value2": "/pendientes"
            },
            {
              "operation": "regex",
              "value1": "={{ $json.message.text }}",
              "value2": "^\\/calificar\\s+[a-f0-9-]+"
            },
            {
              "operation": "equals",
              "value1": "={{ $json.message.text }}",
              "value2": "/help"
            }
          ]
        },
        "fallbackOutput": "3"
      },
      "id": "command_router",
      "name": "Command Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://edurag-zpil.onrender.com/api/evaluations/pending",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "limit",
                "value": "10"
              }
            ]
          }
        },
        "authentication": "none"
      },
      "id": "get_pending_materials",
      "name": "Get Pending Materials",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Formato de la lista de materiales pendientes\nconst materials = $input.all()[0].json;\n\nif (!materials || materials.length === 0) {\n  return [{\n    json: {\n      chatId: $('Telegram Trigger').item.json.message.chat.id,\n      message: \"‚úÖ No hay materiales pendientes de calificar.\"\n    }\n  }];\n}\n\n// Crear mensaje formateado\nlet message = \"üìö *Materiales Pendientes de Calificaci√≥n*\\n\\n\";\n\nmaterials.forEach((material, index) => {\n  message += `${index + 1}. *${material.title}*\\n`;\n  message += `   üìñ Curso: ${material.course_name}\\n`;\n  message += `   üìÖ Subido: ${new Date(material.uploaded_at).toLocaleDateString('es-ES')}\\n`;\n  message += `   üÜî ID: \\`${material.material_id}\\`\\n`;\n  message += `\\n`;\n});\n\nmessage += \"\\nüí° Para calificar un material usa:\\n\";\nmessage += \"`/calificar [ID]`\\n\\n\";\nmessage += \"_Ejemplo: /calificar abc123..._\";\n\nreturn [{\n  json: {\n    chatId: $('Telegram Trigger').item.json.message.chat.id,\n    message: message\n  }\n}];"
      },
      "id": "format_pending_list",
      "name": "Format Pending List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extraer material_id del comando /calificar\nconst text = $('Telegram Trigger').item.json.message.text;\nconst match = text.match(/\\/calificar\\s+([a-f0-9-]+)/i);\n\nif (!match) {\n  return [{\n    json: {\n      chatId: $('Telegram Trigger').item.json.message.chat.id,\n      error: true,\n      message: \"‚ùå Formato inv√°lido. Usa: `/calificar [ID]`\"\n    }\n  }];\n}\n\nconst materialId = match[1];\n\nreturn [{\n  json: {\n    chatId: $('Telegram Trigger').item.json.message.chat.id,\n    materialId: materialId,\n    error: false\n  }\n}];"
      },
      "id": "extract_material_id",
      "name": "Extract Material ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://edurag-zpil.onrender.com/api/materials/{{ $json.materialId }}",
        "authentication": "none"
      },
      "id": "get_material_info",
      "name": "Get Material Info",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://edurag-zpil.onrender.com/api/materials/{{ $('Extract Material ID').item.json.materialId }}/download",
        "authentication": "none",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "download_pdf",
      "name": "Download PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "getBinaryMetadata"
      },
      "id": "extract_pdf_text",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ],
      "disabled": true,
      "notes": "Nota: n8n no tiene extracci√≥n de PDF nativa.\nEsto se hace en el backend con OCR."
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "text",
        "operation": "message",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "=Eres un asistente educativo experto en evaluar materiales acad√©micos (PDFs).\n\nTu tarea es calificar el siguiente material bas√°ndote en estos criterios:\n\n**CRITERIOS DE EVALUACI√ìN:**\n1. **Coherencia (0-10):** ¬øEl contenido tiene sentido? ¬øLas ideas fluyen l√≥gicamente? ¬øHay contradicciones?\n2. **Estructura (0-10):** ¬øEst√° bien organizado? ¬øTiene introducci√≥n, desarrollo y conclusi√≥n? ¬øUsa t√≠tulos y subt√≠tulos apropiados?\n\n**INSTRUCCIONES:**\n- Califica de 0 a 10 (puedes usar decimales como 7.5)\n- Calificaci√≥n final = promedio de coherencia y estructura\n- Identifica 2-4 fortalezas espec√≠ficas\n- Sugiere 2-4 mejoras concretas\n- S√© constructivo pero honesto\n\n**FORMATO DE RESPUESTA (JSON estricto):**\n```json\n{\n  \"score\": 8.5,\n  \"coherence_score\": 9.0,\n  \"structure_score\": 8.0,\n  \"strengths\": [\n    \"Excelente uso de ejemplos pr√°cticos\",\n    \"Argumentaci√≥n clara y bien fundamentada\"\n  ],\n  \"improvements\": [\n    \"Agregar m√°s referencias bibliogr√°ficas\",\n    \"Mejorar la conclusi√≥n con recomendaciones espec√≠ficas\"\n  ]\n}\n```\n\n**IMPORTANTE:** Responde SOLO con el JSON, sin texto adicional."
            },
            {
              "role": "user",
              "content": "=**Material a evaluar:**\n\nT√≠tulo: {{ $('Get Material Info').item.json.title }}\nCurso: {{ $('Get Material Info').item.json.course?.name || 'N/A' }}\nTipo: {{ $('Get Material Info').item.json.material_type }}\n\n**Contenido del PDF:**\n\nNOTA: El texto del PDF se extraer√° usando el endpoint del backend que tiene OCR integrado.\n\nPara esta demo, usa este placeholder:\n\n{{ $json.extracted_text || '[El backend extraer√° el texto aqu√≠ usando OCR si es PDF escaneado]' }}\n\n---\n\nPor favor, eval√∫a este material seg√∫n los criterios establecidos."
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 500
        }
      },
      "id": "ai_grading",
      "name": "AI Grading (OpenAI)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.4,
      "position": [
        1050,
        400
      ],
      "credentials": {
        "openAiApi": {
          "id": "2",
          "name": "OpenAI API"
        }
      },
      "notes": "IMPORTANTE: En producci√≥n, primero llama al backend\npara extraer el texto del PDF con OCR si es necesario."
    },
    {
      "parameters": {
        "jsCode": "// Parsear respuesta de OpenAI y preparar para enviar al backend\nconst aiResponse = $input.first().json.message.content;\n\n// Intentar parsear JSON\nlet evaluation;\ntry {\n  evaluation = JSON.parse(aiResponse);\n} catch (e) {\n  // Si no es JSON v√°lido, extraer con regex\n  const scoreMatch = aiResponse.match(/\"score\"\\s*:\\s*([0-9.]+)/);\n  const coherenceMatch = aiResponse.match(/\"coherence_score\"\\s*:\\s*([0-9.]+)/);\n  const structureMatch = aiResponse.match(/\"structure_score\"\\s*:\\s*([0-9.]+)/);\n  \n  evaluation = {\n    score: scoreMatch ? parseFloat(scoreMatch[1]) : 5.0,\n    coherence_score: coherenceMatch ? parseFloat(coherenceMatch[1]) : 5.0,\n    structure_score: structureMatch ? parseFloat(structureMatch[1]) : 5.0,\n    strengths: [\"Evaluaci√≥n requiere revisi√≥n manual\"],\n    improvements: [\"El formato de respuesta de la IA no fue v√°lido\"]\n  };\n}\n\n// Validar scores\nif (evaluation.score < 0 || evaluation.score > 10) evaluation.score = 5.0;\nif (evaluation.coherence_score < 0 || evaluation.coherence_score > 10) evaluation.coherence_score = 5.0;\nif (evaluation.structure_score < 0 || evaluation.structure_score > 10) evaluation.structure_score = 5.0;\n\n// Asegurar que son arrays\nif (!Array.isArray(evaluation.strengths)) evaluation.strengths = [];\nif (!Array.isArray(evaluation.improvements)) evaluation.improvements = [];\n\nconst materialId = $('Extract Material ID').item.json.materialId;\nconst chatId = $('Telegram Trigger').item.json.message.chat.id;\nconst username = $('Telegram Trigger').item.json.message.from.username || 'unknown';\n\nreturn [{\n  json: {\n    material_id: materialId,\n    evaluated_by: username,\n    score: evaluation.score,\n    coherence_score: evaluation.coherence_score,\n    structure_score: evaluation.structure_score,\n    strengths: evaluation.strengths,\n    improvements: evaluation.improvements,\n    ai_model: \"gpt-4o-mini\",\n    ai_analysis: evaluation,\n    pdf_type: \"digital\", // El backend determinar√° esto con OCR\n    chatId: chatId,\n    materialTitle: $('Get Material Info').item.json.title\n  }\n}];"
      },
      "id": "prepare_evaluation_data",
      "name": "Prepare Evaluation Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1250,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://edurag-zpil.onrender.com/api/evaluations",
        "authentication": "none",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  material_id: $json.material_id,\n  evaluated_by: $json.evaluated_by,\n  score: $json.score,\n  coherence_score: $json.coherence_score,\n  structure_score: $json.structure_score,\n  strengths: $json.strengths,\n  improvements: $json.improvements,\n  ai_model: $json.ai_model,\n  ai_analysis: $json.ai_analysis,\n  pdf_type: $json.pdf_type\n}) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "save_to_backend",
      "name": "Save Evaluation to Backend",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1450,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Formatear respuesta final para el usuario\nconst evaluation = $input.first().json;\n\nconst message = `‚úÖ *Calificaci√≥n Guardada*\\n\\n` +\n  `üìÑ *${evaluation.materialTitle || 'Material'}*\\n\\n` +\n  `üìä *Calificaci√≥n Final:* ${evaluation.score}/10\\n` +\n  `   ‚Ä¢ Coherencia: ${evaluation.coherence_score}/10\\n` +\n  `   ‚Ä¢ Estructura: ${evaluation.structure_score}/10\\n\\n` +\n  `üí™ *Fortalezas:*\\n` +\n  evaluation.strengths.map((s, i) => `${i + 1}. ${s}`).join('\\n') + '\\n\\n' +\n  `üìà *√Åreas de Mejora:*\\n` +\n  evaluation.improvements.map((s, i) => `${i + 1}. ${s}`).join('\\n') + '\\n\\n' +\n  `ü§ñ Evaluado con: ${evaluation.ai_model}\\n` +\n  `üë§ Por: @${evaluation.evaluated_by}`;\n\nreturn [{\n  json: {\n    chatId: evaluation.chatId,\n    message: message\n  }\n}];"
      },
      "id": "format_success_response",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1650,
        400
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send_telegram_response",
      "name": "Send Telegram Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1850,
        300
      ],
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Help command\nconst helpMessage = `ü§ñ *EduRAG Bot - Ayuda*\\n\\n` +\n  `*Comandos disponibles:*\\n\\n` +\n  `/pendientes - Ver materiales sin calificar\\n` +\n  `/calificar [ID] - Calificar un material espec√≠fico\\n` +\n  `/help - Mostrar esta ayuda\\n\\n` +\n  `*Ejemplo de uso:*\\n` +\n  `1Ô∏è‚É£ Escribe \\`/pendientes\\` para ver la lista\\n` +\n  `2Ô∏è‚É£ Copia el ID del material que quieres calificar\\n` +\n  `3Ô∏è‚É£ Escribe \\`/calificar [ID]\\`\\n\\n` +\n  `‚ú® *Caracter√≠sticas:*\\n` +\n  `‚Ä¢ Calificaci√≥n autom√°tica con IA\\n` +\n  `‚Ä¢ Soporte para PDFs escaneados (OCR)\\n` +\n  `‚Ä¢ Evaluaci√≥n de coherencia y estructura\\n` +\n  `‚Ä¢ Retroalimentaci√≥n constructiva\\n\\n` +\n  `üí° *Sistema educativo RAG integrado*`;\n\nreturn [{\n  json: {\n    chatId: $('Telegram Trigger').item.json.message.chat.id,\n    message: helpMessage\n  }\n}];"
      },
      "id": "help_command",
      "name": "Help Command",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Comando desconocido\nconst unknownMessage = `‚ùå *Comando no reconocido*\\n\\n` +\n  `Usa \\`/help\\` para ver los comandos disponibles.`;\n\nreturn [{\n  json: {\n    chatId: $('Telegram Trigger').item.json.message.chat.id,\n    message: unknownMessage\n  }\n}];"
      },
      "id": "unknown_command",
      "name": "Unknown Command",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        650,
        500
      ]
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Command Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Router": {
      "main": [
        [
          {
            "node": "Get Pending Materials",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Material ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Help Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unknown Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pending Materials": {
      "main": [
        [
          {
            "node": "Format Pending List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Pending List": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Material ID": {
      "main": [
        [
          {
            "node": "Get Material Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Material Info": {
      "main": [
        [
          {
            "node": "Download PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF": {
      "main": [
        [
          {
            "node": "AI Grading (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Grading (OpenAI)": {
      "main": [
        [
          {
            "node": "Prepare Evaluation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Evaluation Data": {
      "main": [
        [
          {
            "node": "Save Evaluation to Backend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Evaluation to Backend": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Help Command": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unknown Command": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "edurag",
      "name": "EduRAG"
    },
    {
      "id": "telegram",
      "name": "Telegram"
    },
    {
      "id": "ai-grading",
      "name": "AI Grading"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "edurag-production"
  },
  "pinData": {},
  "versionId": "1.0.0"
}
